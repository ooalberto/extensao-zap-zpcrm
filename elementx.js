(function () {
    // ‚úÖ CONFIGURA√á√ÉO CENTRAL
    const whiteLabelConfig = {
        brandName: "ZPCRM",
        version: "3.8.1.0",
        logo: {
            old: "https://licencas-new.zpcrm.com.br/assets/images/logopng.png",
            new: "https://licencas-new.zpcrm.com.br/assets/images/logowebpng.webp" // üîß PERSONALIZAR
        },
        whatsapp: {
            oldNumber: "5511954875149",
            newNumber: "5511954875149" // üîß PERSONALIZAR
        },
        customDomain: "zpcrm.com.br/ZPCRMcrm", // üîß PERSONALIZAR
        links: {
            tutorials: "https://zpcrm.com.br/crmvideoaulas", // üîß PERSONALIZAR
            RequestFeature: "https://zpcrm.com.br/ZPCRMcrm", // üîß PERSONALIZAR
            privacyPolicy: "https://zpcrm.com.br/politica-de-privacidade" // üîß PERSONALIZAR
        },
        priceSymbolOld: "USD",
        priceSymbolNew: "R$",
        supportMessageEN: "Hello there! I am facing an issue with Extension. I need your assistance.",
        supportMessagePT: "Ol√°! Estou com um problema com a Extens√£o. Preciso da sua ajuda."
    };

    // ‚úÖ VARI√ÅVEIS de apoio para o LOGO
    const LOGO_URL = whiteLabelConfig.logo.new;
    const LOGO_LINK = `https://${whiteLabelConfig.customDomain}`; // ‚úÖ URL absoluto garantido
    const brandFallback = "ZPCRM";
    const version = whiteLabelConfig.version;

    // ‚úÖ TEXTOS QUE SER√ÉO TRADUZIDOS/SUBSTITU√çDOS
    const TRANSLATIONS = {
        "Botzo": brandFallback,
        "Extens√£o CRM": `${brandFallback} ${version}`,
        "Bem-vindo ao CRM": `Bem-vindo ao ${brandFallback} ${version}`,
        "Loading...": "Carregando...",
        "Monthly Plan": "Plano Mensal",
        "Yearly Plan": "Plano Anual",
        "WhatsApp CRM": brandFallback,
        "puppyCRM": brandFallback,
        "Premium 3 Days Trial": "- 3 Dias de Teste",
        "Message automation": "Automa√ß√£o de mensagens",
        "Unlimited messaging": "Mensagens ilimitadas",
        "Contact tagging and segmentation functionality": "Etiquetagem e segmenta√ß√£o de contatos",
        "Unlimited contact management": "Gerenciamento ilimitado de contatos",
        "Full conversation history": "Hist√≥rico completo de conversas",
        "Detailed reports and analysis": "Relat√≥rios e an√°lises detalhados",
        "Advanced integration with WhatsApp": "Integra√ß√£o avan√ßada com WhatsApp",
        "Priority support via email and live chat": "Suporte priorit√°rio por e-mail e chat ao vivo",
        "All features of the free plan": "Todos os recursos do plano gratuito",
        "R$ Get offer": "R$ Obter Oferta",
        "Get offer": "Obter Oferta",
        "Obt√©n oferta": "Obter Oferta",
        "buy": "COMPRAR",
        "USD": whiteLabelConfig.priceSymbolNew,
        "License Details": "Detalhes da Licen√ßa",
        "Here you will find detailed information about your license and options to uninstall it if necessary.": "Aqui voc√™ encontrar√° informa√ß√µes detalhadas sobre sua licen√ßa e op√ß√µes para desinstal√°-la, se necess√°rio.",
        "User:": "Usu√°rio:",
        "Phone:": "Telefone:",
        "License:": "Licen√ßa:",
        "Plan:": "Plano:",
        "Next Payment:": "Pr√≥ximo Pagamento:",
        "Uninstall License": "Desinstalar Licen√ßa",
        "Close": "Fechar",
        "You must have Valid & Active License Key": "Voc√™ precisa de uma Chave de Licen√ßa V√°lida e Ativa",
        "Enter your license key & click on Activate to Activate your License Key.": "Insira sua chave de licen√ßa e clique em Ativar para ativar sua chave de licen√ßa.",
        "Activate Now": "Ativar Agora",
        "You must enter a key": "Voc√™ deve inserir uma chave",
        "Please enter your license key in the field below to activate advanced features.": "Insira sua chave de licen√ßa no campo abaixo para ativar recursos avan√ßados.",
        "undefined": "indefinido",
        "Sort": "Organizar",
        "Validate": "VALIDAR",
        "Done": "Conclu√≠do",
        "To Do": "A Fazer",
        "Processing": "Processando",
        "Cancel": "Cancelar",
        "OK": "OK",
        "Column": "Coluna",
        "Digite o Nome da Coluna:": "Digite o Nome da Coluna:",
        "Adicionar": "Adicionar",
        "Excluir": "Excluir",
        "Inbox": "Caixa de Entrada",
        "Perto": "Fechar",
        "Cancelararararar": "Cancelar",
        "Cancelararar": "Cancelar",
        "Cancelarararar": "Cancelar",
        "Cancelarar": "Cancelar",
        "Recent 50 Chats": "50 Chats Recentes",
        "Automa√ß√£o de mensagensMensagens ilimitadasEtiquetagem e segmenta√ß√£o de contatosGerenciamento ilimitado de contatosHist√≥rico completo de conversasRelat√≥rios e an√°lises detalhadosIntegra√ß√£o avan√ßada com WhatsAppSuporte priorit√°rio por e-mail e chat ao vivoTodos os recursos do plano gratuito": "Recursos inclu√≠dos:<br>‚úÖ Mensagens ilimitadas<br>‚úÖ Automa√ß√£o de mensagens<br>‚úÖ Etiquetagem e segmenta√ß√£o de contatos<br>‚úÖ Gerenciamento ilimitado de contatos<br>‚úÖ Hist√≥rico completo de conversas<br>‚úÖ Relat√≥rios e an√°lises detalhados<br>‚úÖ Integra√ß√£o avan√ßada com o WhatsApp<br>‚úÖ Suporte priorit√°rio por e-mail e chat ao vivo<br>‚úÖ Todos os recursos do plano gratuito inclu√≠dos",
        "Your private user panel": "Seu painel de usu√°rio privado",
        "Tools": "Ferramentas",
        "Sets of free functions": "Conjuntos de fun√ß√µes gratuitas",
        "Functions": "Fun√ß√µes",
        "Import and export contacts, personalized links, and much more...": "Importe e exporte contatos, links personalizados e muito mais...",
        "Kanban Board": "Quadro Kanban",
        "Organize all your clients with this powerful tool": "Organize todos os seus clientes com esta ferramenta poderosa",
        "Quick Reply": "Resposta R√°pida",
        "Reply quickly": "Responda rapidamente",
        "Scheduled Notifications": "Notifica√ß√µes Agendadas",
        "Notify a customer in the future": "Notifique um cliente no futuro",
        "Outgoing Webhooks": "Webhooks de Sa√≠da",
        "Connect with Outer World": "Conecte-se com o Mundo Exterior",
        "Chatbots": "Chatbots",
        "Create and customize your autoresponder chatbot": "Crie e personalize seu chatbot de resposta autom√°tica",
        "Scheduled Broadcasts": "Transmiss√µes Agendadas",
        "Schedule all your messages": "Agende todas as suas mensagens",
        "Templates": "Modelos",
        "Create and organize your templates": "Crie e organize seus modelos",
        "Flash Broadcasts": "Transmiss√µes R√°pidas",
        "Quick and emergency broadcasts": "Transmiss√µes r√°pidas e de emerg√™ncia",
        "Custom Tabs": "Abas Personalizadas",
        "Loading libraries‚Ä¶": "Carregando",
        "Choose Your Plan": "Escolha Seu Plano",
        "If you already have a license, click here to access:": "Se voc√™ j√° possui uma licen√ßa, clique aqui para acessar:",
        "Enter key": "Inserir chave",
        "Month": "Mensal",
        "Year": "Anual",
        "Buy": "Comprar",
        "Just a moment, we‚Äôll be done shortly": "Aguarde um momento",
        "Is your license expired? Don't worry, renew easily and go back to enjoying all the benefits. Keep your access active and avoid interruptions in your service. Click now to renew and continue without problems!": "Sua licen√ßa expirou? N√£o se preocupe, renove facilmente e volte a aproveitar todos os benef√≠cios. Mantenha seu acesso ativo e evite interrup√ß√µes no servi√ßo. Clique agora para renovar e continuar sem problemas!",
        "Renew License": "Renovar Licen√ßa",
        "Pair your labels and organize like a pro": "Emparelhe suas etiquetas e organize como um profissional"
    };

    // ‚úÖ Fun√ß√£o para normalizar URLs
    function normalizeURL(url) {
        return url
            .toLowerCase()
            .replace(/^https?:\/\//, '') // Remove http:// ou https://
            .replace(/^www\./, '') // Remove www.
            .replace(/\/+$/, '') // Remove barras finais
            .replace(/\/+/g, '/') // Normaliza barras duplas
            .split('?')[0] // Remove par√¢metros
            .split('#')[0]; // Remove fragmentos
    }

    // ‚úÖ Fun√ß√£o para depurar links no DOM
    function debugLinks() {
        const links = document.querySelectorAll("a[href*='plwdesign.online']");
        if (links.length === 0) {
            console.log('Nenhum link com "plwdesign.online" encontrado no DOM.');
        } else {
            console.log(`Encontrados ${links.length} links com "plwdesign.online":`);
            links.forEach((link, index) => {
                console.log(`Link ${index + 1}: ${link.href}`);
            });
        }
    }

    // ‚úÖ Corrigido: For√ßa a logo com URL absoluto e adiciona log de depura√ß√£o
    function fixOrInsertLogo() {
        document.querySelectorAll('a.logo img').forEach((img) => {
            if (!img.src || img.src.includes("undefined")) {
                const parentLink = img.closest("a.logo");
                if (parentLink) {
                    parentLink.remove();
                    console.log("Logo quebrada removida.");
                }
            }
        });

        const existingLogo = document.querySelector(`a.logo img[src="${LOGO_URL}"]`);
        if (!existingLogo) {
            const newLogo = document.createElement("a");
            newLogo.className = "logo";
            newLogo.href = LOGO_LINK;
            newLogo.target = "_blank";

            const img = document.createElement("img");
            img.src = LOGO_URL;
            img.alt = "ZPCRM Logo";

            newLogo.appendChild(img);

            const target = document.querySelector("header, .navbar, .top-bar, body");
            if (target) {
                target.insertBefore(newLogo, target.firstChild);
                console.log(`Logo ZPCRM inserida no target com href: ${newLogo.href}`);
            } else {
                document.body.insertBefore(newLogo, document.body.firstChild);
                console.log(`Logo ZPCRM inserida no body com href: ${newLogo.href}`);
            }
        } else {
            const parentLink = existingLogo.closest("a.logo");
            if (parentLink && parentLink.href !== LOGO_LINK) {
                parentLink.href = LOGO_LINK;
                console.log(`Logo existente corrigida com href: ${LOGO_LINK}`);
            }
        }
    }

    function replaceTexts() {
        document.querySelectorAll("*:not(script):not(style)").forEach((element) => {
            element.childNodes.forEach((node) => {
                if (node.nodeType === Node.TEXT_NODE) {
                    Object.entries(TRANSLATIONS).forEach(([key, value]) => {
                        if (node.nodeValue.includes(key)) {
                            node.nodeValue = node.nodeValue.replace(new RegExp(key, "g"), value);
                            console.log(`Texto substitu√≠do: "${key}" -> "${value}"`);
                        }
                    });
                }
            });
        });
    }

    function replaceLogo() {
        document.querySelectorAll(`img[src="${whiteLabelConfig.logo.old}"]`).forEach((img) => {
            img.src = whiteLabelConfig.logo.new;
            console.log(`Logo trocado: ${whiteLabelConfig.logo.old} -> ${whiteLabelConfig.logo.new}`);
        });
    }

    function replaceLinks() {
        const TARGET_LINKS = [
            "https://web.whatsapp.com/[object%20Object]",
            "https://wa.me/#?text=WA%20CRM%201%20Days%20Trail",
            "https://web.whatsapp.com/#"
        ];

        document.querySelectorAll("a").forEach((link) => {
            TARGET_LINKS.forEach((target) => {
                if (link.href.includes(target)) {
                    link.href = whiteLabelConfig.links.tutorials;
                    console.log(`Link substitu√≠do: ${target} -> ${whiteLabelConfig.links.tutorials}`);
                }
            });

            if (link.href.includes("plwdesign.online")) {
                link.href = link.href.replace(/plwdesign\.online/g, whiteLabelConfig.customDomain);
                console.log(`Link plwdesign.online substitu√≠do: ${link.href}`);
            }
        });
    }

    // ‚úÖ Fun√ß√£o refor√ßada para substituir links do menu
    function replaceMenuLinks() {
        const MENU_LINKS = [
            "https://zpcrm.com.br/ZPCRMcrm/Broadcast",
            "https://zpcrm.com.br/ZPCRMcrm/tab",
            "https://zpcrm.com.br/ZPCRMcrm/Templates",
            "https://zpcrm.com.br/ZPCRMcrm/workflow",
            "https://zpcrm.com.br/ZPCRMcrm/Schedulebroadcast",
            "https://zpcrm.com.br/ZPCRMcrm/schedules",
            "https://zpcrm.com.br/ZPCRMcrm/kanban",
            "https://zpcrm.com.br/ZPCRMcrm/utilities",
            "https://zpcrm.com.br/ZPCRMcrm/exportcontacts",
            "https://zpcrm.com.br/ZPCRMcrm/import-export",
            "https://zpcrm.com.br/ZPCRMcrm/Notes",
            "https://zpcrm.com.br/ZPCRMcrm/calendar",
            "https://zpcrm.com.br/ZPCRMcrm/blur",
            "https://zpcrm.com.br/ZPCRMcrm/linkgenerate",
            "https://zpcrm.com.br/ZPCRMcrm/AddGoogle",
            "https://zpcrm.com.br/ZPCRMcrm/Rapidresponce",
            "https://zpcrm.com.br/ZPCRMcrm/signature",
            "https://zpcrm.com.br/ZPCRMcrm/chatgpt",
            "https://zpcrm.com.br/ZPCRMcrm/googlecontact",
            "https://zpcrm.com.br/ZPCRMcrm/startchat"
        ];

        document.querySelectorAll("a").forEach((link) => {
            const normalizedLink = normalizeURL(link.href);
            MENU_LINKS.forEach((target) => {
                const normalizedTarget = normalizeURL(target);
                if (normalizedLink.includes(normalizedTarget)) {
                    const oldHref = link.href;
                    link.href = whiteLabelConfig.links.tutorials;
                    console.log(`Link do menu substitu√≠do: ${oldHref} -> ${whiteLabelConfig.links.tutorials}`);
                }
            });
        });

        // Depura√ß√£o adicional
        debugLinks();
    }

    // ‚úÖ Fun√ß√£o para for√ßar substitui√ß√£o repetida de links do menu
    function forceMenuLinksReplacementRepeatedly() {
        let attempts = 0;
        const interval = setInterval(() => {
            console.log(`Tentativa ${attempts + 1} de substitui√ß√£o de links do menu...`);
            replaceMenuLinks();
            if (++attempts >= 20) {
                console.log('Finalizadas tentativas de substitui√ß√£o de links do menu.');
                clearInterval(interval);
            }
        }, 500);
    }

    function replaceSpecialLinks() {
        const { tutorials, RequestFeature, privacyPolicy } = whiteLabelConfig.links;
        console.log('whiteLabelConfig.links:', whiteLabelConfig.links);
        console.log('RequestFeature:', RequestFeature);

        document.querySelectorAll("a").forEach((link) => {
            if (link.href.includes("/tutorials")) {
                link.href = tutorials;
                console.log(`Link tutorials substitu√≠do: ${link.href}`);
            }
            if (link.href.includes("/request-feature")) {
                console.log('Substituindo link:', link.href, 'por:', RequestFeature);
                link.href = RequestFeature;
                console.log(`Link request-feature substitu√≠do: ${link.href}`);
            }
            if (link.href.includes("/privacy-policy")) {
                link.href = privacyPolicy;
                console.log(`Link privacy-policy substitu√≠do: ${link.href}`);
            }
        });
    }

    function replacePrices() {
        document.querySelectorAll("div, span, p").forEach((el) => {
            if (el.innerText.includes(whiteLabelConfig.priceSymbolOld)) {
                el.innerText = el.innerText.replace(whiteLabelConfig.priceSymbolOld, whiteLabelConfig.priceSymbolNew);
                console.log(`S√≠mbolo de pre√ßo substitu√≠do: ${whiteLabelConfig.priceSymbolOld} -> ${whiteLabelConfig.priceSymbolNew}`);
            }
        });
    }

    function ensureWhatsAppLinkAlwaysUpdated() {
        const { oldNumber, newNumber } = whiteLabelConfig.whatsapp;

        document.querySelectorAll("a[href*='wa.me']").forEach((link) => {
            if (link.href.includes(oldNumber)) {
                link.href = link.href.replace(oldNumber, newNumber);
                console.log(`Link WhatsApp substitu√≠do: ${oldNumber} -> ${newNumber}`);
            }

            link.addEventListener("click", () => {
                if (link.href.includes(oldNumber)) {
                    link.href = link.href.replace(oldNumber, newNumber);
                    console.log(`Link WhatsApp substitu√≠do no clique: ${oldNumber} -> ${newNumber}`);
                }
            });
        });
    }

    function forceWhatsAppReplacementRepeatedly() {
        let attempts = 0;
        const interval = setInterval(() => {
            console.log(`Tentativa ${attempts + 1} de substitui√ß√£o de links WhatsApp...`);
            ensureWhatsAppLinkAlwaysUpdated();
            if (++attempts >= 20) {
                console.log('Finalizadas tentativas de substitui√ß√£o de links WhatsApp.');
                clearInterval(interval);
            }
        }, 500);
    }

    function replaceMessages() {
        const { supportMessageEN, supportMessagePT } = whiteLabelConfig;

        document.querySelectorAll("*:not(script):not(style)").forEach((el) => {
            el.childNodes.forEach((node) => {
                if (node.nodeType === Node.TEXT_NODE && node.nodeValue.includes(supportMessageEN)) {
                    node.nodeValue = node.nodeValue.replace(new RegExp(supportMessageEN, "g"), supportMessagePT);
                    console.log(`Mensagem de suporte substitu√≠da: "${supportMessageEN}" -> "${supportMessagePT}"`);
                }
            });
        });
    }

    function fixGroupMessageSending() {
        const originalSendTextMsgToChat = window.Store?.SendTextMsgToChat;

        if (originalSendTextMsgToChat) {
            window.Store.SendTextMsgToChat = async function (chat, ...args) {
                try {
                    if (chat.isGroup && !chat.id.server.includes("g.us")) {
                        chat.id.server = "g.us";
                        console.log('Corrigido servidor de grupo para "g.us"');
                    }
                    return originalSendTextMsgToChat.apply(this, [chat, ...args]);
                } catch (error) {
                    console.error("Erro ao corrigir envio para grupos:", error);
                }
            };
        }
    }

    function forceTextColorForSpecificTexts() {
        // Fun√ß√£o n√£o fornecida no c√≥digo original, mantida como placeholder
        console.log('forceTextColorForSpecificTexts chamado (placeholder).');
    }

    function interceptUninstallFeedbackLink() {
        // Fun√ß√£o n√£o fornecida no c√≥digo original, mantida como placeholder
        console.log('interceptUninstallFeedbackLink chamado (placeholder).');
    }

    function monitorDOMChanges() {
        const observer = new MutationObserver(() => {
            console.log('DOM alterado, aplicando substitui√ß√µes...');
            replaceTexts();
            replaceLogo();
            replaceLinks();
            replaceSpecialLinks();
            replacePrices();
            ensureWhatsAppLinkAlwaysUpdated();
            replaceMessages();
            fixOrInsertLogo();
            replaceMenuLinks();
            forceTextColorForSpecificTexts();
            interceptUninstallFeedbackLink();
        });

        observer.observe(document.body, { childList: true, subtree: true, attributes: true, attributeFilter: ['href'] });
        console.log('Observador de DOM iniciado.');
    }

    function initialize() {
        const main = () => {
            console.log('Inicializando substitui√ß√µes...');
            replaceTexts();
            replaceLogo();
            replaceLinks();
            replaceSpecialLinks();
            replacePrices();
            ensureWhatsAppLinkAlwaysUpdated();
            forceWhatsAppReplacementRepeatedly();
            replaceMessages();
            fixGroupMessageSending();
            fixOrInsertLogo();
            replaceMenuLinks();
            forceMenuLinksReplacementRepeatedly();
            forceTextColorForSpecificTexts();
            interceptUninstallFeedbackLink();
            debugLinks(); // Depura√ß√£o inicial
            monitorDOMChanges();
        };

        if (document.readyState === "loading") {
            console.log('Aguardando DOMContentLoaded...');
            document.addEventListener("DOMContentLoaded", main);
        } else {
            console.log('DOM j√° carregado, executando main...');
            main();
        }
    }

    initialize();
})();